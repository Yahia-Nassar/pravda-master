@page "/classifier"
@inject HttpClient Http
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="container">
    <h1>Classify a text</h1>

    <div>
        <label for="title">Title</label>
        <input id="title" type="text" placeholder="Title" @bind="classified.Title" class="input title" />
    </div>

    <div>
        <label for="subject">Subject</label>
        <input id="subject" type="text" placeholder="Subject" @bind="classified.Subject" class="input subject" />
    </div>

    <div>
        <label for="date">Date</label>
        <input id="date" type="text" placeholder="Date" @bind="classified.Date" class="input date" />
    </div>

    <textarea placeholder="Text" @bind="classified.Text" class="input text"></textarea>
    <button @onclick="Classify">Classify</button>
    <p style="display: @displayStyle" class="classification-result">Classification @(this.classified.isClassifiedFake == true ? "fake" : "real")</p>
</div>


@code {
    public Classified classified { get; set; } = new Classified();
    public string displayStyle { get; set; } = "none";

    protected override async Task OnInitializedAsync()
    {
        var LoggedIn = await localStorage.ContainKeyAsync("token");
        if (!LoggedIn)
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private class CachedClassificationResponse
    {
        public bool IsClassifiedFake { get; set; }
        public bool Found { get; set; }
    }
    private class MLClassificationResponse
    {
        public bool IsClassifiedFake { get; set; }
        public double Score { get; set; }
    }

    private class CrawlerClassificationResponse
    {
        public bool IsClassifiedFake { get; set; }
        public double Similarity { get; set; }
    }

    public async Task Classify()
    {
        var req = new Dictionary<string, dynamic>
        {
            { "title", this.classified.Title },
            { "text", this.classified.Text },
            { "subject", this.classified.Subject },
            { "date", this.classified.Date },
        };

        // check to see if article is in cache
        HttpResponseMessage res = await
            Http.PostAsJsonAsync($"{@Configuration["NewsStorage"]}/cached_classifications/getprediction",
            req);
        var ccr = await res.Content.ReadFromJsonAsync<CachedClassificationResponse>();
        if (ccr.Found)
        {
            this.classified.isClassifiedFake = ccr.IsClassifiedFake;
        }
        else
        {
            // classify instance
            res = await Http.PostAsJsonAsync($"{@Configuration["ClassificationService"]}/classifications", req);
            var MLRes = await res.Content.ReadFromJsonAsync<MLClassificationResponse>();
            System.Console.WriteLine("ML score = " + MLRes.Score);

            var article = new Dictionary<string, string> {
                {"Title", this.classified.Title},
                {"Text", this.classified.Text},
            };

            res = await Http.PostAsJsonAsync($"{@Configuration["WebCrawlerService"]}/title", article);
            var crawlerRes = await res.Content.ReadFromJsonAsync<CrawlerClassificationResponse>();
            System.Console.WriteLine("crawler title score = " + crawlerRes.Similarity);
            if (crawlerRes.Similarity >= 0.5)
            {
                res = await Http.PostAsJsonAsync($"{@Configuration["WebCrawlerService"]}/text", article);
                crawlerRes = await res.Content.ReadFromJsonAsync<CrawlerClassificationResponse>();
                System.Console.WriteLine("crawler text score = " + crawlerRes.Similarity);

                double finalScore = 0.2 * MLRes.Score + 0.8 * crawlerRes.Similarity;
                this.classified.isClassifiedFake = finalScore < 0.5;
            }
            else
            {
                this.classified.isClassifiedFake = MLRes.IsClassifiedFake;
            }

            // store the article in cache
            req["isClassifiedFake"] = this.classified.isClassifiedFake;
            await Http.PostAsJsonAsync($"{@Configuration["NewsStorage"]}/cached_classifications/store", req);
        }
        displayStyle = "block";
    }

}
