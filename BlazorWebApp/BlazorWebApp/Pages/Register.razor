@page "/register"
@using BlazorWebApp.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<EditForm model="@User" class="container" OnValidSubmit="@RegisterTask">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>Please fill in this form to create an account.</p>

    <label for="first-name"><b>First Name</b></label>
    <input id="first-name" type="text" placeholder="First Name" @bind="User.FirstName" class="input firstname" />

    <label for="last-name"><b>Last Name</b></label>
    <input id="last-name" type="text" placeholder="Last Name" @bind="User.LastName" class="input lastname" />

    <label for="email"><b>Email</b></label>
    <input id="email" type="email" placeholder="Email" @bind="User.Email" class="input email" />

    <label for="password"><b>Password</b></label>
    <input id="password" type="password" placeholder="Password" @bind="User.Password" class="input password"
        minlength="6" />


    <div class="clearfix">
        <button type="submit" class="signupbtn">Register</button>
    </div>

    <div class="form_output" style="display: @DisplayStyle">@TextOutput</div>
</EditForm>

@code
{
    public RegisterUser User { get; set; } = new RegisterUser();
    public string TextOutput { get; set; }
    public string DisplayStyle { get; set; } = "none";
    protected override async Task OnInitializedAsync()
    {
        var LoggedIn = await localStorage.ContainKeyAsync("token");
        if (LoggedIn)
        {
            NavigationManager.NavigateTo("/home");
        }
    }

    public async Task RegisterTask()
    {
        Dictionary<string, dynamic> req = new Dictionary<string, dynamic>
        {
            {"firstname", User.LastName},
            {"lastname", User.FirstName},
            {"email", User.Email},
            {"password", User.Password},
        };

        HttpResponseMessage res = await Http.PostAsJsonAsync($"{@Configuration["UserService"]}/users/register", req);

        if (res.StatusCode == System.Net.HttpStatusCode.OK)
        {
            this.TextOutput = "Successfully registered.";
            @* redirect to /login *@
            await InvokeAsync(() =>
            {
                                var aTimer = new System.Timers.Timer(1000);
                                aTimer.Elapsed += (sender, args) =>
            {
                    NavigationManager.NavigateTo("/login", false);
                };
                                aTimer.AutoReset = false;
                                aTimer.Enabled = true;
                            });
        }
        else
        {
            this.TextOutput = "Failed registering.";
        }

        DisplayStyle = "block";
    }
}
